#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, fturret, fsleeve, fbarrel, fflare, mturret, msleeve, fmissile1, fmissile2, cturret1, csleeve1, cbarrel1, cflare1, cturret2, csleeve2, cbarrel2, cflare2,
		radar, bturret, bsleeve, bbarrel, bflare, h1, h2, cm1, cm2, cm3, cm4, cm5, cm6, cm7, cm8,wake1, wake2, torp;

static-var   Reloader, restore_delay , shooting_num, shooting_num2;


#define SIG_MOVE			1
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			12
#define SIG_AIM_5			18
#define SIG_AIM_6			32
#define SIG_AIM_7			64
#define SIG_AIM_8			128
#define SIG_AIM_9			256




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	turn bturret to y-axis <180.000000> now;
	turn cturret1 to y-axis <-90.000000> now;
	turn cturret2 to y-axis <90.000000> now;
	spin radar around y-axis speed <50.000000>;
	turn msleeve to x-axis <-90.000000> now;
	shooting_num=1;
	shooting_num2=1;
	Reloader = 2;
	restore_delay = 3000;
	start-script SmokeUnit();
}

Reload()
{
	sleep 1000;
	show fmissile1;
	sleep 5000;
	show fmissile2;
	sleep 5000;
	Reloader = 2;
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}



RestoreWeapon1()
{
	sleep restore_delay;
	turn fturret to y-axis <0.000000> speed <10.000000>;
	turn fsleeve to x-axis <0.000000> speed <10.000000>;

}

RestoreWeapon2()
{
	sleep restore_delay;
	turn mturret to y-axis <0.000000> speed <50.000000>;
	turn msleeve to x-axis <-90.000000> speed <50.000000>;
	
	
}

RestoreWeapon3()
{
	sleep restore_delay;
	turn bturret to y-axis <180.000000> speed <50.000000>;
	turn bsleeve to x-axis <0.000000> speed <50.000000>;
	
	
	
}

RestoreWeapon4()
{
	sleep restore_delay;
	turn cturret1 to y-axis <-90.000000> speed <50.000000>;
	turn csleeve1 to x-axis <0.000000> speed <50.000000>;
	
	
	
}

RestoreWeapon5()
{
	sleep restore_delay;
	turn cturret2 to y-axis <90.000000> speed <50.000000>;
	turn csleeve2 to x-axis <0.000000> speed <50.000000>;
	

}




AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn fturret to y-axis heading speed <30.000000>;
	turn fsleeve to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn fturret around y-axis;
	wait-for-turn fsleeve around x-axis;
	start-script RestoreWeapon1();
	return (1);
	
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
			if( Reloader < 1 )
	{
		sleep 800;
	}
	if( Reloader > 0 )
	{
	turn mturret to y-axis heading speed <50.000000>;
	turn msleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn mturret around y-axis;
	wait-for-turn msleeve around x-axis;
	start-script RestoreWeapon2();
	return (1);
	}
	
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn bturret to y-axis heading speed <30.000000>;
	turn bsleeve to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn bturret around y-axis;
	wait-for-turn bsleeve around x-axis;
	start-script RestoreWeapon3();
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn cturret1 to y-axis heading speed <80.000000>;
	turn csleeve1 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn cturret1 around y-axis;
	wait-for-turn csleeve1 around x-axis;
	start-script RestoreWeapon4();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn cturret2 to y-axis heading speed <80.000000>;
	turn csleeve2 to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn cturret2 around y-axis;
	wait-for-turn csleeve2 around x-axis;
	start-script RestoreWeapon5();
	return (1);
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	
	return (1);
}

AimWeapon7(heading, pitch)
{
	signal SIG_AIM_7;
	set-signal-mask SIG_AIM_7;
	turn h1 to y-axis heading speed <1000.000000>;
	turn h1 to x-axis <0.000000> - pitch speed <1000.000000>;
	wait-for-turn h1 around y-axis;
	wait-for-turn h1 around x-axis;
	return (1);
}

AimWeapon8(heading, pitch)
{
	signal SIG_AIM_8;
	set-signal-mask SIG_AIM_8;
	turn h2 to y-axis heading speed <1000.000000>;
	turn h2 to x-axis <0.000000> - pitch speed <1000.000000>;
	wait-for-turn h2 around y-axis;
	wait-for-turn h2 around x-axis;
	
	return (1);
}

AimWeapon9(heading, pitch)
{
	signal SIG_AIM_9;
	set-signal-mask SIG_AIM_9;
	
	return (1);
}


FireWeapon1()
{
	move fbarrel to z-axis [-1.500000] speed [1.000000];
	emit-sfx 1024 | 0 from fflare;
	sleep 150;
	move fbarrel to z-axis [0.000000] speed [0.1000000];	

}

FireWeapon2()
{
	--Reloader;
	if( Reloader == 0 )
	{
		start-script Reload();
	}
	if(shooting_num==1)
{
	hide fmissile1;
}

if(shooting_num==2)
{
	hide fmissile2;
}

shooting_num=shooting_num+1;

if( shooting_num == 3)
{
shooting_num=1;
}
}
	


FireWeapon3()
{
	move bbarrel to z-axis [-1.500000] speed [1.000000];
	emit-sfx 1024 | 0 from bflare;
	sleep 150;
	move bbarrel to z-axis [0.000000] speed [0.1000000];
}

FireWeapon4()
{
	spin cbarrel1 around z-axis speed <1000.000000>;
	sleep 50;
	stop-spin cbarrel1 around z-axis;
}

FireWeapon5()
{
	spin cbarrel2 around z-axis speed <1000.000000>;
	sleep 50;
	stop-spin cbarrel2 around z-axis;
}

FireWeapon6()
{

}

FireWeapon7()
{

}

FireWeapon8()
{

}

FireWeapon9()
{

}

AimFromWeapon1(piecenum)
{
	piecenum = fturret;
}

AimFromWeapon2(piecenum)
{
	piecenum = mturret;
}

AimFromWeapon3(piecenum)
{
	piecenum = bturret;
}

AimFromWeapon4(piecenum)
{
	piecenum = cturret1;
}

AimFromWeapon5(piecenum)
{
	piecenum = cturret2;
}

AimFromWeapon6(piecenum)
{
	piecenum = cm1;
}

AimFromWeapon7(piecenum)
{
	piecenum = h1;
}

AimFromWeapon8(piecenum)
{
	piecenum = h2;
}
AimFromWeapon9(piecenum)
{
	piecenum = torp;
}


QueryWeapon1(piecenum)
{

		piecenum = fflare;

}

QueryWeapon2(piecenum)
{
if (shooting_num==1)
{
piecenum=fmissile1;
}

if (shooting_num==2)
{
piecenum=fmissile2;
}

	
}

QueryWeapon3(piecenum)
{

		piecenum = bflare;

	
}

QueryWeapon4(piecenum)
{
	
		piecenum = cflare1;
	
	
}

QueryWeapon5(piecenum)
{

		piecenum = cflare2;

	
}

QueryWeapon6(piecenum)
{

if (shooting_num2==1)
{
piecenum=cm1;
}

if (shooting_num2==2)
{
piecenum=cm2;
}
if (shooting_num2==3)
{
piecenum=cm3;
}

if (shooting_num2==4)
{
piecenum=cm4;
}
if (shooting_num2==5)
{
piecenum=cm5;
}

if (shooting_num2==6)
{
piecenum=cm6;
}
if (shooting_num2==7)
{
piecenum=cm7;
}

if (shooting_num2==8)
{
piecenum=cm8;
}
}

QueryWeapon7(piecenum)
{	
	piecenum = h1;
}

QueryWeapon8(piecenum)
{
	piecenum = h2;
}

QueryWeapon9(piecenum)
{

		piecenum = torp;

	
}


SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		
		explode body type BITMAPONLY | BITMAP2;
		
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		
		explode body type BITMAPONLY | BITMAP2;
		
		return (0);
	}
	corpsetype = 3;
	
	explode body type BITMAPONLY | BITMAP2;
}
