#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missholder1, missholder2, missile1, missile2, door1, door2, turret1,
       sleeve1, barrel11, barrel12, flare1, flare2, turret2, sleeve2, barrel21,
       barrel22, flare3, flare4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, shooting_num3, Static_Var_5,
            shooting_num, shooting_num2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn turret1 to y-axis <90.000000> now;
	turn turret2 to y-axis <180.000000> now;
	shooting_num3=1;
	Static_Var_5 = 2;
	shooting_num=1;
	shooting_num2=1;;
	Static_Var_3 = 10000;
	start-script SmokeUnit();
}

Reload()
{
	turn missholder2 to z-axis <0.000000> speed <10.000000>;
	wait-for-turn missholder2 around z-axis;
	sleep 50000;
	show missile1;
	sleep 50000;
	show missile2;
	sleep 3500;
	Static_Var_5 = 2;
}

RestoreAfterDelay()
{
	sleep Static_Var_3;
	turn turret1 to y-axis <90.000000> speed <40.000000>;
	turn sleeve1 to x-axis <0.000000> speed <20.000000>;
	turn turret2 to y-axis <180.000000> speed <40.000000>;
	turn sleeve2 to x-axis <0.000000> speed <20.000000>;
	turn missholder2 to z-axis <0.000000> speed <15.000000>;
	wait-for-turn missholder2 around z-axis;
	turn door1 to x-axis <0.000000> speed <10.000000>;
	turn door2 to x-axis <0.000000> speed <10.000000>;
}

AimWeapon1(Func_Var_1, Func_Var_2)
{
	signal 2;
	set-signal-mask 2;
	turn turret1 to y-axis Func_Var_1 speed <25.000000>;
	turn sleeve1 to x-axis <0.000000> - Func_Var_2 speed <10.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	if( Static_Var_5 < 1 )
	{
		sleep 800;
	}
	if( Static_Var_5 > 0 )
	{
		turn door1 to x-axis <-90.000000> speed <10.000000>;
		turn door2 to x-axis <90.000000> speed <10.000000>;
		wait-for-turn door1 around x-axis;
		turn missholder2 to z-axis <-90.000000> speed <10.000000>;
		wait-for-turn missholder2 around z-axis;
		start-script RestoreAfterDelay();
		return (1);
	}
}

AimWeapon3(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	turn turret2 to y-axis Func_Var_1 speed <25.000000>;
	turn sleeve2 to x-axis <0.000000> - Func_Var_2 speed <10.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if(shooting_num==1)
{
move barrel11 to z-axis [-2.000000] now;
emit-sfx 1024 from flare1;
move barrel11 to z-axis [0.000000] speed [1.000000];
}

if(shooting_num==2)
{
move barrel12 to z-axis [-2.000000] now;
emit-sfx 1024 from flare2;
move barrel12 to z-axis [0.000000] speed [1.000000];
}

shooting_num=shooting_num+1;

if( shooting_num == 3)
{
shooting_num=1;
}
}

FireWeapon2()
{
	--Static_Var_5;
	if( Static_Var_5 == 0 )
	{
		start-script Reload();
	}
if(shooting_num3==1)
{
hide missile1;
}

if(shooting_num3==2)
{
hide missile2;
}

shooting_num3=shooting_num3+1;

if( shooting_num3 == 3)
{
shooting_num3=1;
}
}

FireWeapon3()
{
	if(shooting_num2==1)
{
move barrel21 to z-axis [-2.000000] now;
emit-sfx 1024 from flare3;
move barrel21 to z-axis [0.000000] speed [1.000000];
}

if(shooting_num2==2)
{
move barrel22 to z-axis [-2.000000] now;
emit-sfx 1024 from flare4;
move barrel22 to z-axis [0.000000] speed [1.000000];
}

shooting_num2=shooting_num2+1;

if( shooting_num2 == 3)
{
shooting_num2=1;
}
}

AimFromWeapon2(Func_Var_1)
{
	Func_Var_1 = 2;
}

AimFromWeapon1(Func_Var_1)
{
	Func_Var_1 = 7;
}

AimFromWeapon3(Func_Var_1)
{
	Func_Var_1 = 13;
}

QueryWeapon1(Func_Var_1)
{
	if( shooting_num == 1 )
	{
		Func_Var_1 = 11;
	}
	if( shooting_num == 2 )
	{
		Func_Var_1 = 12;
	}
}

QueryWeapon2(Func_Var_1)
{
	if( shooting_num3 == 1 )
	{
		Func_Var_1 = 3;
	}
	if( shooting_num3 == 2 )
	{
		Func_Var_1 = 4;
	}
}

QueryWeapon3(Func_Var_1)
{
	if( shooting_num2 == 1 )
	{
		Func_Var_1 = 17;
	}
	if( shooting_num2 == 2 )
	{
		Func_Var_1 = 18;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 100 )
	{
		corpsetype = 3;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	}
	corpsetype = 3;
	explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
