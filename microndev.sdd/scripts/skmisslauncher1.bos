#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missile1, turret, sleeve, missile2, radar;

static-var  Static_Var_1, Static_Var_2, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_2 = 0;
	gun_1 = turret;
	Static_Var_1 = 10000;
	spin radar around y-axis speed <60.000000>;
	start-script SmokeUnit();
}

Reload()
{
	sleep 500;
	show missile1;
	sleep 500;
	show missile2;
	sleep 150;
	gun_1 = turret;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.000000> speed <60.071429>;
	turn sleeve to x-axis <0.000000> speed <60.038462>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( gun_1 < 1 )
	{
		sleep 800;
	}
	if( gun_1 > 0 )
	{
		turn turret to y-axis heading speed <60.071429>;
		turn sleeve to x-axis <0.000000> - pitch speed <60.038462>;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		start-script RestoreAfterDelay();
		return (1);
	}
}

FirePrimary()
{
	--gun_1;
	if( gun_1 == 0 )
	{
		start-script Reload();
	}
	if( Static_Var_2 == 0 )
	{
		hide missile1;
	}
	if( Static_Var_2 == 1 )
	{
		hide missile2;
	}
	++Static_Var_2;
	if( Static_Var_2 == 2 )
	{
		Static_Var_2 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = missile1;
}

SweetSpot(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = missile1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = missile2;
	}
}

Killed(severity, corpsetype)
{
	hide missile1;
	hide missile2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
