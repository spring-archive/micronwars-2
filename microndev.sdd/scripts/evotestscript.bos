#define TA // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece firepoint1, firepoint2, base, turret, barrel1, dirt; // these are the pieces of the model

#include "ROCKUNIT.H"

static-var terraintype, bmoving, moving, shooting_num; // these are the variables

#define gdmarty 1024+0 // this is a custom explosion generator thinging

// Signal definitions
#define SIG_AIM 2
#define SIG_AIM_2 4 // this is a aim define

SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define
{
while( get BUILD_PERCENT_LEFT )
{
sleep 400;
}
while( TRUE )
{
healthpercent = get HEALTH;
if( healthpercent < 66 )
{
smoketype = 256 | 2;
if( Rand( 1, 66 ) < healthpercent )
{
smoketype = 256 | 1;
}
emit-sfx 1026 from base;
}
sleeptime = healthpercent * 50;
if( sleeptime < 200 )
{
sleeptime = 200;
}
sleep sleeptime;
}
}

EmitWakes()
{
while( TRUE )
{
if( bMoving )
{
emit-sfx 2 from base;
}
sleep 300;
}
}

setSFXoccupy(setSFXoccupy_argument)
{
terraintype = setSFXoccupy_argument;

if(terraintype == 2)
{
move base to y-axis [-0.85] speed [50];
set UPRIGHT to 1;
}
else
{
move base to y-axis [0.0] speed [50];
set UPRIGHT to 0;
}
if(terraintype == 4)
{
move base to y-axis [0] speed [50];
set UPRIGHT to 0;
}
else
{
move base to y-axis [-0.85] speed [50];
set UPRIGHT to 1;
}
}

Thrust()
{
while( TRUE )
{
if (moving)
{
emit-sfx 1025 + 0 from dirt;
}
sleep 400;
}
}

StartMoving()
{
moving=1;
}

StopMoving()
{
moving=0;
}

Create() // tells it what to do on creation
{
shooting_num=1;
start-script Thrust();
start-script setSFXoccupy();
start-script EmitWakes();
start-script SmokeUnit();
}

RestoreAfterDelay()
{
sleep 3000;
turn turret to y-axis <0.000000> speed <35.005495>;
turn barrel1 to x-axis <0.000000> speed <15.000000>;
}

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming
{
signal SIG_AIM;
set-signal-mask SIG_AIM;
turn turret to y-axis heading speed <255>;
turn barrel1 to x-axis <0> - pitch speed <150>;
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;
start-script RestoreAfterDelay();
return (1);
}

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets
{

if(shooting_num==1)
{
emit-sfx 1024 from firepoint2;
}

if(shooting_num==2)
{
emit-sfx 1024 from firepoint1;
}

shooting_num=shooting_num+1;

if( shooting_num == 3)
{
shooting_num=1;
}
}

AimFromWeapon1(piecenum) // where it aims the weapon from
{
piecenum = barrel1;
}

QueryWeapon1(piecenum) // where the shot is called from
{
if (shooting_num==1)
{
piecenum=firepoint1;
}

if (shooting_num==2)
{
piecenum=firepoint2;
}
}

Killed(severity, corpsetype) // how it explodes
{
corpsetype = 1;
explode barrel1 type EXPLODE_ON_HIT;
explode turret type EXPLODE_ON_HIT;
} 