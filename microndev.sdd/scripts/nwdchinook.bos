#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, brotor, frotor, turret1, sleeve1, extend1, extend2, magnet;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5, bMoving;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

AimWeapon1()
{
	return (1);
}

AimFromWeapon1(Func_Var_1)
{
	Func_Var_1 = 1;
}

QueryWeapon1(Func_Var_1)
{
	Func_Var_1 = 1;
}

FireWeapon1()
{
	sleep 5000;
}

Create()
{
	Static_Var_5 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	spin brotor around y-axis speed <1000.000000>;
	spin frotor around y-axis speed <1000.000000>;
}

StopMoving()
{
	bMoving = FALSE;
	stop-spin brotor around y-axis decelerate <1.000000>;
	stop-spin frotor around y-axis decelerate <1.000000>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret1) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret1) - [1000.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_1 = get HYPOT(Func_Var_5,Func_Var_4) - [1000.000000];
	Static_Var_2 = get XZ_ATAN(Func_Var_3);
	Static_Var_3 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_4 = Static_Var_1 < [190.000000];
}

BoomExtend()
{
	turn turret1 to y-axis Static_Var_2 speed <1000.000000>;
	turn magnet to x-axis Static_Var_3 speed <1000.000000>;
	turn sleeve1 to x-axis <0.000000> - Static_Var_3 speed <1000.000000>;
	move extend1 to z-axis Static_Var_1 / [0.000012] speed [1000.000000];
	move extend2 to z-axis Static_Var_1 / [0.000012] speed [1000.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-move extend1 along z-axis;
	wait-for-move extend2 along z-axis;
}

BoomReset()
{
	turn turret1 to y-axis <180.000000> speed <1000.000000>;
	turn magnet to x-axis <0.000000> speed <1000.000000>;
	turn sleeve1 to x-axis <0.000000> speed <1000.000000>;
	move extend1 to z-axis [0.000000] speed [1000.000000];
	move extend2 to z-axis [0.000000] speed [1000.000000];
}

BoomToPad()
{
	turn turret1 to y-axis <180.000000> speed <1000.000000>;
	turn magnet to x-axis <0.000000> speed <1000.000000>;
	turn sleeve1 to x-axis <-20.000000> speed <1000.000000>;
	move extend1 to z-axis [0.000000] speed [1000.000000];
	move extend2 to z-axis [0.000000] speed [1000.000000];
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	wait-for-move extend1 along z-axis;
	wait-for-move extend2 along z-axis;
	turn magnet to x-axis <-30.000000> speed <1000.000000>;
	turn sleeve1 to x-axis <30.000000> speed <1000.000000>;
	wait-for-turn sleeve1 around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP4;
}
